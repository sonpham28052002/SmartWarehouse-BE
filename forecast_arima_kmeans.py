import pandas as pd
import numpy as np
from pmdarima import auto_arima
from statsmodels.tsa.arima.model import ARIMA
import json
import sys
import warnings

# T·∫Øt t·∫•t c·∫£ c·∫£nh b√°o
warnings.simplefilter(action='ignore', category=FutureWarning)
warnings.simplefilter(action='ignore', category=UserWarning)
warnings.simplefilter(action='ignore', category=DeprecationWarning)

# ƒê·ªçc d·ªØ li·ªáu t·ª´ file CSV
file_path = "data_csv.csv"
try:
  df = pd.read_csv(file_path, parse_dates=['date'], index_col='date')
except Exception as e:
  print(json.dumps({"error": f"L·ªói khi ƒë·ªçc file CSV: {str(e)}"}))
  sys.exit(1)

# ƒê·ªçc danh s√°ch s·∫£n ph·∫©m t·ª´ stdin
try:
  input_data = json.load(sys.stdin)
  selected_products = input_data.get("selected_products", [])
  n_periods = input_data.get("n_periods", 1)
except Exception as e:
  print(json.dumps({"error": f"Kh√¥ng th·ªÉ ƒë·ªçc d·ªØ li·ªáu t·ª´ Java: {str(e)}"}))
  sys.exit(1)

# Ki·ªÉm tra danh s√°ch s·∫£n ph·∫©m h·ª£p l·ªá
valid_products = [p for p in selected_products if p in df.columns]

if not valid_products:
  print(json.dumps({"error": "Kh√¥ng c√≥ s·∫£n ph·∫©m h·ª£p l·ªá ƒë·ªÉ d·ª± b√°o"}))
  sys.exit(1)

# D·ª± b√°o cho c√°c s·∫£n ph·∫©m ƒë∆∞·ª£c ch·ªçn
forecast_results = {}

for product in valid_products:  # üî• Ch·ªâ ch·∫°y tr√™n s·∫£n ph·∫©m ƒë∆∞·ª£c ch·ªçn
  try:
    # X√°c ƒë·ªãnh tham s·ªë t·ª± ƒë·ªông
    model_auto = auto_arima(df[product], seasonal=False, trace=False,
                            suppress_warnings=True)
    p, d, q = model_auto.order

    # Hu·∫•n luy·ªán m√¥ h√¨nh ARIMA
    model = ARIMA(df[product], order=(p, d, q))
    model_fit = model.fit()

    # D·ª± b√°o n th√°ng ti·∫øp theo
    future_forecast = model_fit.forecast(steps=n_periods)
    forecast_results[product] = np.ceil(future_forecast).astype(int).tolist()

  except Exception as e:
    forecast_results[product] = f"Error: {str(e)}"

# Xu·∫•t k·∫øt qu·∫£ JSON
print(json.dumps(forecast_results))
sys.stdout.flush()
